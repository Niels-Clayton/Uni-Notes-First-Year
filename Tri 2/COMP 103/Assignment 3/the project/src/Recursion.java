
import ecs100.*;

import javax.sound.sampled.*;
import java.awt.Color;
import java.io.*;
import java.util.*;

public class Recursion {
    
    private File roar = new File("Roar.wav");
    private Random random = new Random();
    private int prob1;
    private int prob2;
    private int prob3;
    private double size = 1;
    private int count = 0;
    private File theFile = new File("Company Employees");
    
    public Recursion(){
        setupGUI();
    }
    
    private void setSize(double size){
        this.size = size;
    }
    
    
    private void theRoar(File sound){
        try{
            Clip roar = AudioSystem.getClip();
            roar.open(AudioSystem.getAudioInputStream(sound));
            roar.start();

        } catch (Exception e){}
        
    }
    
    private void scanfile(File file){
        try{
            Scanner scan = new Scanner(file);
            UI.println(scan.next());
        }
        catch(Exception e){}
    }
    
    
    public void roar(int x, int y){
        if (x > 1000){
            x = 20;
            y += 100;
        }
        if (y > 1000){
            UI.setFontSize(100);
            UI.setColor(Color.GREEN);
            UI.drawString("ROAR", 400, 400);
            UI.sleep(600);
            theRoar(roar);
            return;
        }
        UI.drawImage("ROAR.jpg", x, y, 100, 100);
        theRoar(roar);
        UI.sleep(2);
        roar(x + 100, y);
    }
    
    public void rand(){
        double sigma = 0.6;
        double logNorm = Math.exp(sigma * random.nextGaussian());
        UI.println(logNorm);
        UI.println(random.nextBoolean());
        UI.println(random.nextGaussian());
    }
    
    
    public void equals(){
        TheMeme test1 = new TheMeme(1,32,2);
        TheMeme test2 = new TheMeme(1,32,2);
        TheMeme test3 = new TheMeme(2,4,3);
        TheMeme test4 = new TheMeme(99,400329473,800493920);
        System.out.printf("%d\n%d\n%d\n%d\n", test1.hashCode(), test2.hashCode(), test3.hashCode(), test4.hashCode());
        System.out.print(test1);
        boolean result1 = test1.equals(test2);
        boolean result2 = test2.equals(test1);
        boolean result3 = test3.equals(test4);
        
        
        UI.printf("%B\n%B\n%B\n", result1, result2, result3);
    }
    
    public void sorting(){
        Queue<TheMeme> tester = new PriorityQueue<>((TheMeme o1, TheMeme o2) -> {if (o1.getTest1() == o2.getTest1()) {return 0;}
                                                                                 else return(o1.getTest1() < o2.getTest1() ? 1:-1);});
        for (int i = 0; i < 10000; i++){
            tester.add(new TheMeme((int)(Math.random()*100), (int)(Math.random()*100), (int)(Math.random()*100)));
        }
        for (int i = 0; i < 10000; i++){
            UI.println(tester.poll().getTest1());
        }
    }
    
    static public void drawTree(int x, int y, int span){
        
        if(span < 4) return;
        UI.drawLine(x,y ,(x+span/2), (y-40));
        drawTree((x+span/2), (y-40), (span/2));
        UI.drawLine(x,y ,(x-span/2), (y-40));
        drawTree((x-span/2), (y-40), (span/2));
    }
  
    private void design(double x, double y, double degree, double size){
        
        double x2 = x + size/2;
        double x3 = x + size;
        double x4 = x + size/4;
    
        
        double y2 = y + Math.sqrt((Math.pow(size, 2))-(Math.pow(size/2, 2)));
        double y3 = y + (Math.sqrt((Math.pow(size, 2))-(Math.pow(size/2, 2)))/2);
        
        UI.drawLine(x, y2, x2, y);
        UI.drawLine(x3, y2, x2, y);
        UI.drawLine(x, y2, x3, y2);
        count ++;
        Trace.println(count*8);
        double deg = degree - 1;
        
        if(deg == 0) {return;}
        
        design(x, y3, deg, size/2);
        design(x2, y3, deg, size/2);
        design(x4, y, deg, size/2);
        //UI.sleep(70);
    
    }
    
    public void sort(){
        ArrayList<Integer> numlist = new ArrayList<Integer>();
        for (int i = 0; i < 10; i++){
            numlist.add((int)(Math.random()*100));
        }
        Collections.sort(numlist, (Integer one, Integer two ) -> {if(one > two) return -1; if(one < two)return 1; else return 0;});
        UI.println(numlist);
    }
    
    
    public void setupGUI(){
        UI.addButton("equals method", this::DoShittyQuestionForKevin);
        UI.addButton("scanning", () -> scanfile(theFile));
        UI.addButton("sorting", this::sort);
        UI.addButton("design", () -> {UI.clearGraphics(); design(20,20, this.size, 850);});
        UI.addButton("tree", () -> drawTree(500, 400, 500));
        UI.addButton("Do the roar", () -> roar(20, 20));
        UI.addSlider("Size",1, 20, 1, this::setSize);
        UI.addButton("that meme", () -> {UI.setFontSize(8); UI.printf("                              -    .|||||.\n                                  |||||||||\n                          -      ||||||  .\n" +
                "                              -  ||||||   >\n                                ||||||| -/\n                           --   ||||||'(\n                        -       .'      \\ \n                             .-'    | | |\n" +
                "                            /        \\ \\ \\ \n              --        -  |      `---:.`.\\ \n             ____________._>           \\\\_\\\\____ ,--.__\n  --    ,--\\\"\\\"           /    `-   .     |)_)    '\\     '\\ \n" +
                "       /  \"             |      .-'     /          \\      '\\ \n     ,/        ,         \\           .'            '\\     |\n     | ,   ,              \\         /                '\\,  /\n" +
                "     |  ,    ,   , , =_____`-.   .-'_________________,--\\\" \n   - |         ,  /'/'      /\\>-' ( <\n    \\  ,   ,   ,/ /    -  ( <    |\\_)\n     \\   ,, ,_/,-'        |\\_)\n   -- -'-;.__:-'\n");});
        UI.setDivider(0);
        UI.addButton("THE POND", () ->{
            UI.println("&&&&&&&&&&&&&&&%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%################################################################\n"+
                       "&&&&&&&&&&&&&&&%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#%%%################################################################\n"+
                       "&&&&&&&&&&&&&&%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%###(((((##(###%####################################################\n"+
                       "&&&&&&&&&&&&&&%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%##%##%%%%%%##%%%%#(##%#%#############################################\n"+
                       "&&&&&&&&&&&&&%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&%%%#%%#%##%#(##(###%%%###%%%##########################################\n"+
                       "&&&&&&&&&&&&%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&%%%%%%%##((##(#((#((/((((#(##%%%%%%#######################################\n"+
                       "&&&&&&&&&&&&&%%%%%%%%%%%%%%%%%%%%%%%%%%%&%#%%#%#(/((#(((////*****/**/*//(##%%%%&%%#####################################\n"+
                       "&&&&&&&&&&&&%%%%%%%%%%%%%%%%%%%%%%%&@&&%&%%%%%%%#(((//********,,,*,******/*//(#%%%&&&%#################################\n"+
                       "&&&&&&&&&&&%%%%%%%%%%%%%%%%%%%%%%%@&&%&&%##%#(#((//**********,,*,,,,,,,,,****//(%%%&&&&%###############################\n"+
                       "&&&&&&&&&&%%%%%%%%%%%%%%%%%%%%%%&&&%&%%%(###((((//***,,,,**,,,,,,,,,,,,,,,,,****/(%&&&&&%##############################\n"+
                       "&&&&&&&&&%%%%%%%%%%%%%%%%%%%%%%&%%%&&%%%####((///****,,,,,,,,,,,,,,,,,,,,,,,,,****/(%%&&&%#############################\n"+
                       "&&&&&&&&&%%%%%%%%%%%%%%%%%%%%%%&&&%%%%#(####((/*****,,,,,,,,,,,,,,,,,,,,,,,,,,,,,**/(##%%%%############################\n"+
                       "&&&&&&&&%%%%%%%%%%%%%%%%%%%%%%%&&%%%######((///******,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,**(%%%%%##(##########(##############\n"+
                       "&&&&&&&%%%%%%%%%%%%%%%%%%%%%#%&&%####%###(((///*****,,,,,,,,,,,,..,.,,,,.,,,,,,,,,,,,*#%%%#(###((#(((((((##(#(#########\n"+
                       "&&&&&&%%%%%%%%%%%%%%%%%%%%###%&#%##%#%%#(///***,*,,,,,,,,,,,,.............,,,,,,,,**(#%(##(((((((((((((((((((((########\n"+
                       "&&&&&&%%%%%%%%%%%%%%%%%%#####&&&%%###%%%##/////******,,,,,,,,..............,,.,,,,,,,*/#(/#((#((((((((((((((((((((####(\n"+
                       "&&&&&%%%%%%%%%%%%%%%%%%%#####&%&&%#%%%%#(////***,*,,,,,,,,,,..,..........,,.,,,,,,,*/(#(##(((((((((((((((((((((((((((((\n"+
                       "&&&&&%%%%%%%%%%%%%%%%%#######&&%&%#%%%%%##(/////***,,,,,,,,,,...,,.........,.,,,,,,,,*//#(//(((((((((((((((((((((((((((\n"+
                       "&&&&%%%%%%%%%%%%%%%%%########&&&@&%%%%%%##(////****,,,,,,,,,,..,,,,,,.,,.,..,,,,,,,,,,*/((((/((((((((((((((((((((((((((\n"+
                       "&&&&%%%%%%%%%%%%%%%%%#####&&%%&&@&%%%%%#(//(//***,,,,,,,,,,..,,,...........,,,,,,,,**/((/(/((((((((((((((((((((((((((((\n"+
                       "&&&&%%%%%%%%%%%%%%%######&&&&&@@@&%%%%%%(/(((//****,,,,,,,..,,,,,,.,....,,,.,.,,,,,*/((//#(((((((((((((((((((((((((((((\n"+
                       "&&&%%%%%%%%%%%%%%%#######%&&&&&&@@&%%%%%%#####(%%%####(/**,,,,*,,,,,,,,,,*,,,,,,.,,,,**/((/((((((((((((((((((((((((((((\n"+
                       "&&&%%%%%%%%%%%%%%########%&&%&&&&&@&&&%%%%%#(((((#%%%##(//**,**,,,**/((#((//*****,,,,,*/##/*,,/((((((((((((((((((((((((\n"+
                       "&&&%%%%%%%%%%%%%#########%&%%&&&&%%&%&&%%%##(///(#&%#(/((#(/,,*,,*#%#((##(#(//*****,***/%..,**/((((((((((((((((((((((((\n"+
                       "&&%%%%%%%%%%%%%##########%&%%&&&%%%&%%%###(%#%@@%,*#/##(&%(((/#(**//(%&*,,**//*///((/,..,*(((((((((((((((((((((((((((((\n"+
                       "&&%%%%%%%%%%%%###########%&%&&&&%%&&%#(#(//(/*,*,,,,,,/(#&*,,,%#,,/(*%&&%(/%(*****&&&(,,..,/(((((((((((((((((((((((((((\n"+
                       "&&%%%%%%%%%%%%############&%&&&%%%&%%(//(/(/////**,,,,*(#&%(*,,,*%,,****,,,,,,,*/***#**,,/*,,///((//(((((((((((((((((((\n"+
                       "&%%%%%%%%%%%##############%%&&&&%%&&%(///***///***,,,*/((##(*,,,,*,..,,,,,***,,,,,,,,**,,,,,./////////////////(((((((((\n"+
                       "&%%%%%%%%%%%###############&%%%%&&&#((//***,,,,,,**///(##(*,,,,,*,,..,,,,,,,,.,,,,,**,,.,.,////////////////////////((((\n"+
                       "&%%%%%%%%%%################(&%%%%&&%###((/**********,*/(##(**,,,,,,,,*,,,.....,,,,,,**,.,,.,*//////////////////////////\n"+
                       "&%%%%%%%%%#################((%%%&&%%%#(#(/********/(#(((%(/*,,,,,,,,,,,,.......,.,,,,**,..,////////////////////////////\n"+
                       "%%%%%%%%%%###############((((((#%%&%##%#(///******/#%#(##(/*,,..,,,,,*//*,,....,,,,,,*,..,/////////////////////////////\n"+
                       "%%%%%%%%%###############(((((((((%%%##%#((#/******/(%(##(/*,,,,,,,,,,,(/*,,,,,,,,,*,..,////////////////////////////////\n"+
                       "%%%%%%%%##############(((((((((((%%#(##/(%(*/****///(#%%&&&(/***(%/*,,,,*,*(***,,**,,*/////////////////////////////////\n"+
                       "%%%%%%%%#############((((((((((((%%%(#(/##/*/////(/(/((#%##((/(/***,**,*,****(*******//////////////////////////////////\n"+
                       "%%%%%%%%############(((((((((((((#####(/(#*/*((###(((/((///*//(******,,,,******,*,*,///////////////////////////////////\n"+
                       "%%%%%%%#############((((((((((((((%###/((#/*,*//&@&%%%%##((/********//*///**,/**,,*,*//////////////////////////////////\n"+
                       "%%%%%%%###########((((((((((((((((##((#(##(*,,////##(**.*..,...,.*.*,**/*,,,,***,*/////////////////////////////////////\n"+
                       "%%%%%%############(((((((((((((((((##/#(/((*****/((//(/**,,,....,,*/*,,,//,,,,,,,,*////////////////////////////////////\n"+
                       "%%%%%%###########((((((((((((((((((##((/(#/#(/**//#(/////**********,***,***,,,,,,,*////////////////////////////////////\n"+
                       "%%%%%############(((((((((((((((((((#(((/((((/***/((#(//********,,***,,,,*,,,**,,*/////////////////////////////////////\n"+
                       "%%%%%############(((((((((((((((((((&((((((#(/****//(#((*//(*/*///**,,,,***,*,,,*///******/*************///////////////\n"+
                       "%%%%%###########((((((((((((((((#&&&&%#(/(###/**/***/**/****/,,*,*,*,,,,,*,,,,******************************///////////\n"+
                       "%%%%%###########(((((((((((((((&%&%@&%%#((/(#//*****/****,**,,*,,,**,,*,*,,*,**********************************/*/*////\n"+
                       "%%%%###########(((((((((((((((#/(%#@&%%%%#/(#((*****,****,,**,,,,,,,,,,,,,,,*******************************************\n"+
                       "%%%%###########((((((((((((((/#*//(@%%%%#%#(/(//***,/*,*,,,,,,,,,,,.,,***,,.*******************************************\n"+
                       "%%%%##########(((((((((((((//***/*/@%%%##%###(//****/,,,,,,*,*,,,,,.,*,,,,,. ******************************************\n"+
                       "%%%%#########((((((((((((((%%*,*,,,#&%######%%##(/*,/,*,*,,*,,,,,,,,,,,,,,/,. ,****************************************\n"+
                       "%%%#########((((((/****//*/##,**,,,*#%#############(#(/***,*,**,*,,,,,,,,,(*,. .***************************************\n"+
                       "%%%#########(**.../...,,,**%&,/*,,/.,*%(((((((((#(##((((////***,,,,,,,,,,,(*... .**************************************\n"+
                       "%%%##//,,,,,,*/,..,.,/,....*#./,*,,...,,/(///*****///*****,,,,,,,,,,,,,,,*&*,.    ,    ...*****************************\n"+
                       "%%%##//,,,,,,*/,..,.,/,....*#./,*,,...,,/(///*****///*****,,,,,,,,,,,,,,,*&*,.    ,    ...*****************************\n"+
                       "%#*,(,,,,,(...,.*...,......(*.*.*,*.. ..*.(/****,,********,,,,,,,,,,,,,,,(#.*..    ,.   ..,.***************************\n"+
                       "**(*,,,*./.**.,..,...,....,(..*.,*/..  *,,.//***,,,,*******,,,,,,,,,,,,,*%..*.     .   ...........,.,******************\n"+
                       "***,,,,(...,,,/.,..,.*.*.,*(  / .,,,.../ /. ***,,.,,,,*****,,,,,,,,,,,,,(#,..,    . ,,  ....,,.  ........,,,***********\n"+
                       "/*,(,,,,*..,.,,,/...*/..,,(, .*  .,*,..* ... .*,,,,,,,,,,,,,,,,,,,,,,,,*##.. *...    . . ...,. ...*     ...  . .*******\n"+
                       ",**,,(,,,..,,..,,/.......,#. .*  ../,.,. ...   *,,..,,,,,,,,,,,,,,,,,,,/#,..  *.*    ...  ...,  ...* ..../....,.. .,***\n"+
                       "#*,,,,,*/,.../...,.,....,./. .  . ./,,*. .. .  .,,,,,,,,,,,,,,,,..,,,,*(#.  ..,..,.   .  .  .., ..... ....* .  ,   *  .\n"+
                       "/,*(*,*..,,.../........*,* . .,   ./,,*. .  .....,,.,,,,,.,,,,,,..,,,,/(**  . .* ..   .  . ...  .,..* ....,    ..  , ..\n");});
        
        
        
    }
    
    
    
    
    
    
    
    
    
    
    
    public void DoShittyQuestionForKevin(){
        UI.println (BinaryToDecimal(1011));
        UI.println (BinaryToDecimal(1));
        UI.println (BinaryToDecimal(11));
    }
    
    
    public int BinaryToDecimal(int binary){
        
        int b = binary;
        int count = 0;
        int decimal = 0;
        
        if(b == 1){
            return 1;
        }
        
    
        while(b >= 10){
            int remainder = b % 10;
            decimal += ( remainder * Math.pow(10, count));
            count++;
            b /= 10;
        }
        return decimal;
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public static void main(String[] Args){
        new Recursion();
    }
}