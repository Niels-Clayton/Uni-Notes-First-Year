// This program is copyright VUW.import ecs100.UI;import java.io.File;import java.io.IOException;import java.util.*;// You are granted permission to use it to construct your answer to a COMP103 assignment.// You may not distribute it in any other way without permission./* Code for COMP103 - 2018T2, Assignment 2 * Name: * Username: * ID: *//** * Genealogy: * Prints out information from a genealogical database */public class Genealogy {        // all the people:  key is a name,  value is a Person object    private final Map<String, Person> database = new HashMap<>();    // All of the descendants of the current selected person, ordered.    private Queue<Person> familyTree = new LinkedList<>();        private String selectedName;  //currently selected name.        private boolean databaseHasBeenFixed = false;        /**     * Constructor     */    public Genealogy(){        loadData();        setupGUI();    }        /**     * Buttons and text field for operations.     */    public void setupGUI(){        UI.addButton("Print all names", this::printAllNames);        UI.addButton("Print all details", this::printAllDetails);        UI.addTextField("Name", this::selectPerson);        UI.addButton("Parent details", this::printParentDetails);        UI.addButton("Add child", this::addChild);        UI.addButton("Find & print Children", this::printChildren);        UI.addButton("Fix database", this::fixDatabase);        UI.addButton("Print GrandChildren", this::printGrandChildren);        UI.addButton("Print missing people", this::printMissing);        UI.addButton("Descendant Tree", () -> {familyTrees(true);});        UI.addButton("Ancestry Tree", () -> {familyTrees(false);});        UI.addButton("Clear Text", UI::clearText);        UI.addButton("Reload Database", this::loadData);        UI.addButton("Quit", UI::quit);        UI.setDivider(1.0);    }        /**     * Load the information from the file "database.txt".     * Each line of the file has information about one person:     * name, year of birth, mother's name, father's name     * (note: a '-' instead of a name means  the mother or father are unknown)     * For each line,     * - construct a new Person with the information, and     * - add to the database map.     */        public void loadData(){        try{            Scanner scan = new Scanner(new File("database.txt"));            while (scan.hasNext()){                String name = scan.next();                int DoB = scan.nextInt();                String mother = scan.next();                String father = scan.next();                database.put(name, new Person(name, DoB, mother, father)); //scan and store the next 4 tokens, use them to make a person object.            }            scan.close();            UI.println("Loaded " + database.size() + " people into the database");        } catch (IOException e){            throw new RuntimeException("Loading database.txt failed" + e);        }    }            /**     * Prints out all of the details of the given Person     * If you are printing out the parents of someone, print     * with different formatting, otherwise print normally     */        public void printPerson(String name, boolean parent){       //print the details of a person, use different formatting        //depending on if you are printing them as a parent or not        if (parent){  //if parent, print with this formatting            String grandMother = database.get(name).getMother();            String grandFather = database.get(name).getFather();            if (grandMother == null){                grandMother = "Unknown";    //if the value us null, replace it with "Unknown" before printing            }            if (grandFather == null){                grandFather = "Unknown";            }            int DoB = database.get(name).getDoB();                        UI.printf("    %s\n    Date of Birth: %d\n    Mother: %s\n    Father: %s\n",                    name, DoB, grandMother, grandFather);                        Set<String> children = findChildren(name); //retrieve the children set            if (!(children.isEmpty())){                 //If the set isn't empty, print each child                UI.println(" - " + name + "'s children:");                for (String child : children){                    UI.println("    " + child);                }            }            UI.println("------------------");        }                        else{ //if not a parent print with this formatting                        String mother = database.get(name).getMother();            String father = database.get(name).getFather();            if (mother == null){                mother = "Unknown"; //if the value us null, replace it with "Unknown" before printing            }            if (father == null){                father = "Unknown";            }            int DoB = database.get(name).getDoB();                        UI.printf("%s:\n    Date of Birth: %d\n    Mother: %s\n    Father: %s\n",                    name, DoB, mother, father);                        Set<String> children = findChildren(name); //retrieve the children set            if (!(children.isEmpty())){                 //If the set isn't empty, print each child                UI.println(" - " + name + "'s children:");                for (String child : children){                    UI.println("    " + child);                }            }            UI.println("------------------");        }    }        /**     * Prints out names of all the people in the database     */    public void printAllNames(){        for (String name : database.keySet()){            UI.println(name);        }        UI.println("-----------------");    }        /**     * Prints out details of all the people in the database     */    public void printAllDetails(){        UI.println("------------------");        for (String name : database.keySet()){            printPerson(name, false); // calls the print person method on each member of the database.        }    }        /**     * Store value (capitalised properly) in the selectedName field.     * If there is a person with that name currently in people,     * then print out the details of that person,     * Otherwise, offer to add the person:     * If the user wants to add the person,     * ask for year of birth, mother, and father     * create the new Person,     * add to the database, and     * print out the details of the person.     * Hint: it may be useful to make an askPerson(String name) method     * Hint: remember to capitalise the names that you read from the user     */    public void selectPerson(String value){                try{ //if the text box dosent return a value,or returns null. return rather than throwing an exception.            selectedName = capitalise(value);        } catch (Exception e){            UI.println("There is no one selected");            selectedName = null;            return;        }                if (database.containsKey(selectedName)){  //If the person is in the database, print out all of their details            printPerson(selectedName, false);        }        //if the person is not in the database, ask to add them, if yes, ask for their details and create new person        else if (UI.askString("Add this name to database? Yes/No").equalsIgnoreCase("yes")){                        int DoB = UI.askInt("What year were they born?");            String mother = capitalise(UI.askString("Who was their mother?"));            String father = capitalise(UI.askString("Who was the father"));                        database.put(selectedName, new Person(selectedName, DoB, mother, father));  //add new person to the database            UI.printf("Added %s to the database\n------------------\n", selectedName);            printPerson(selectedName, false);        }    }        /**     * Print all the details of the mother and father of the person     * with selectedName (if there is one).     * (If there is no person with the current name, print "no person called ...")     * If the mother or father's names are unknown, print "unknown".     * If the mother or father names are known but they are not in     * the database, print "...: No details known".     */    public void printParentDetails(){                if (!(database.containsKey(selectedName)) || selectedName == null){            UI.println("That person is not known"); //if selectedName isn't in the database, return.            return;        }                String mother = database.get(selectedName).getMother();        String father = database.get(selectedName).getFather();                if (database.containsKey(mother)){ //if the mother is known, print our their details            UI.println(selectedName + "'s mother is:");            printPerson(mother, true);        }        else{            UI.printf("%s's Mother is Unknown\n------------------\n", selectedName);        }                if (database.containsKey(father)){ //if the father is known print out their details            UI.println(selectedName + "'s father is:");            printPerson(father, true);        }        else{            UI.printf("%s's Father is Unknown\n------------------\n", selectedName);        }    }        /**     * Add a child to the person with selectedName (if there is one).     * If there is no person with the selectedName,     * print "no person called ..." and return     * Ask for the name of a child of the selectedName     * (remember to capitalise the child's name)     * If the child is already recorded as a child of the person,     * print a message     * Otherwise, add the child's name to the current person.     * If the child's name is not in the current database,     * offer to add the child's details to the current database.     * Check that the selectedName is either the mother or the father.     */    public void addChild(){        if (!(database.containsKey(selectedName)) || selectedName == null){            UI.println("That person is not known");  //if selectedName isn't in the database, return.            return;        }                String child = capitalise(UI.askString("What is the child's name?")); //Ask for the child's name                if (database.get(selectedName).getChildren().contains(child)){  //Check to see if the child has already been added            UI.println("That child has already been added");        }                if (database.containsKey(child)){            database.get(selectedName).addChild(child); //Add a child to the data set of the selected person            //then re-display the person.            UI.printf("%s was already in the database\nThey were added as one of %s's children\n------------------\n", child, selectedName);            printPerson(selectedName, false);        }                else if (!(database.containsKey(child)) &&                (UI.askString("Add " + child + " to database? Yes/No").equalsIgnoreCase("yes"))){                        int DoB = UI.askInt("What year was " + child + " born?");            String mother = capitalise(UI.askString("Who is " + child + "'s mother?"));            String father = capitalise(UI.askString("Who is " + child + "'s father?"));                        if ((mother.equals(selectedName)) || (father.equals(selectedName))){ //if neither the mother or the farther are the person                database.put(child, new Person(child, DoB, mother, father));    //you are adding the child to, print that the mother or father is incorrect.                                database.get(selectedName).addChild(child);                UI.printf("Added %s to the database:\n------------------\n", child);                printPerson(child, false);            }            else{                UI.println("The mother or father is incorrect");            }                    }        else{            database.get(selectedName).addChild(child);            printPerson(selectedName, false);        }    }        /**     * Print the number of children of the selectedName and their names (if any)     * Find the children by searching the database for people with     * selectedName as a parent.     * Hint: Use the findChildren method (which is needed for other methods also)     */    public void printChildren(){        if (!databaseHasBeenFixed){            fixDatabase();        }        if (!(database.containsKey(selectedName)) || selectedName == null){            UI.println("That person is not known"); //if selectedName isn't in the database, return.            return;        }        else{            Set<String> children = findChildren(selectedName); //retrieve the set of children            int numChildren = children.size();            UI.printf("%s has %d children\n", selectedName, numChildren); //print the number of children            if (numChildren > 0){  //if they have children, print out each of their names                for (String child : children){                    UI.println("   -" + child);                }            }        }        UI.println("-----------------");    }        /**     * Find (and return) the set of all the names of the children of     * the given person by searching the database for every person     * who has a mother or father equal to the person's name.     * If there are no children, then return an empty Set     */    public Set<String> findChildren(String name){        if ((database.containsKey(name))){ //if selectedName is in the database return the set of their children.            return database.get(name).getChildren();        }        else{            return new HashSet<>(); //if they don't have children, return an empty set.        }    }        /**     * When the database is first loaded, none of the Persons will     * have any children recorded in their children field.     * Fix the database so every Person's children includes all the     * people that have that Person as a parent.     * Hint: use the findChildren method     */    public void fixDatabase(){        if (database.isEmpty()){            UI.println("No database loaded");            return;        }                for (String name : database.keySet()){  //for each person in the database, get their parents            String father = database.get(name).getFather();            String mother = database.get(name).getMother();            if (database.containsKey(father)){                database.get(father).addChild(name); //if the parents are also in the database, add the person as a child of their parents            }            if (database.containsKey(mother)){                database.get(mother).addChild(name); //if the parents are also in the database, add the person as a child of their parents            }        }        databaseHasBeenFixed = true;        UI.println("Found children of each person in database\n-----------------");    }            /**     * Print out all the grandchildren of the selectedName (if any)     * Assume that the database has been "fixed" so that every Person     * contains a set of all their children.     * If the selectedName is not in the database, print "... is not known"     */    public void printGrandChildren(){        if (!databaseHasBeenFixed){            UI.println("Database must be fixed first!");        }        if (!database.containsKey(selectedName)){ //if selectedName isn't in the database, return.            UI.println("That person is not known");            return;        }                Set<String> children = database.get(selectedName).getChildren();        Set<String> grandChildren = new HashSet<>(); //set of grandchildren                for (String child : children){ //for each child, cheack if they are in the database, and retreive their children            if (database.containsKey(child)){                grandChildren.addAll(database.get(child).getChildren()); //add their children to the grandchildren set            }        }        UI.printf("%s has %d grandchildren:\n", selectedName, grandChildren.size()); // print the number of grandchildren        if (!(grandChildren.isEmpty())){            for (String child : grandChildren){                UI.println("    " + child);            }        }        UI.println("------------------");    }        /**     * Print out all the names that are in the database but for which     * there is no Person in the database. Do not print any name twice.     * These will be names of parents or children of Persons in the Database     * for which a Person object has not been created.     */    public void printMissing(){        UI.println("Missing names:");        Set<String> missingNames = new HashSet<>();                for (String person : database.keySet()){            Set<String> relatedPeople = new HashSet<>();                        relatedPeople.add(database.get(person).getFather());            relatedPeople.add(database.get(person).getMother());            relatedPeople.addAll(database.get(person).getChildren());                        for (String check : relatedPeople){                if (!(database.containsKey(check)) && (!(check == null))){                                        missingNames.add(check);                }            }        }        if (missingNames.isEmpty()){            UI.println("There are no missing names:");            return;        }                for (String missing : missingNames){            UI.println("- " + missing);        }                UI.println("------------------");    }        /**     * print out either the ancestry tree or the descendants tree     */    public void familyTrees(boolean descendants){                if (descendants){            if (database.containsKey(selectedName)){                getDescendants(selectedName, 0);                            //get the decendants of the selected person, and store them in the Queue            }            for (int i = 0; i < familyTree.size(); i = 0){                            //for each person in the decendants queue print out their details                printTree(familyTree.peek().getGen(), familyTree.poll().getName(), true);            }        }        else{            UI.println(selectedName + ":");            if (database.containsKey(selectedName)){                                  //get all of the ancestors of the selected person                getAncestors(selectedName, 0);            }            if (familyTree.isEmpty()){                UI.println("There are no known ancestors of " + selectedName);            }                        for (int i = 0; i < familyTree.size(); i = 0){                            //for each person in the queue, print their names                printTree(familyTree.peek().getGen(), familyTree.poll().getName(), false);            }        }    }        /**     * when called on a person, print the number of tabs as their generation, then print out their information     */        public void printTree(int generation, String person, boolean descendants){        if (descendants){            if (generation > 0){                                                      //print out a number of tabs equal to the generation of the person.                if (generation == 1) UI.printf("     ");                else UI.printf("    |");                printTree((generation - 1), person, true);            }            else{                UI.println(person + " (" + database.get(person).getDoB() + ")");       //when the tabbing is correct, print outthe name.            }        }        else{            if (generation > 0){                                                      //print out a number of tabs equal to the generation of the person.                if (generation == 1) UI.printf("     ");                else UI.printf("    |");                printTree((generation - 1), person, false);            }            else{                                                                   //when the tabbing is correct, print outthe name.                UI.println(database.get(person).getParent() + person + " (" + database.get(person).getDoB() + ")");            }        }    }        /**     * fill the familyTree queue with all of the ancestors of the seleted person     * Take the selected name and retrieve their parents. Then add the selected name to a que.     * For each parent, retrieve their parents, then add them to the que aswell.     * repeat this step till all the ancestors of the selectedName have been added to the que     */        public void getAncestors(String relative, int generation){                database.get(relative).setGen(generation);        List<String> ancestors = new ArrayList<>                (Arrays.asList(database.get(relative).getMother(), database.get(relative).getFather()));                if (generation > 0){            familyTree.offer(database.get(relative));        }                if (!ancestors.isEmpty()){            int gen = generation + 1;            for (int i = 0; i < 2; i++){                String parent = ancestors.get(i);                                if (database.containsKey(parent)){                    if (i == 0){                        database.get(parent).setParent("Mother: ");  //since the ancestors array always contains the mother first,                    }                    else{                        database.get(parent).setParent("Father: ");        //if i = 0, set the person as the mother, and 1 as the father                    }                    getAncestors(parent, gen);                }            }        }    }        /**     * fill the familyTree queue with all of the decendants of the seleted person     * Take the selected name and retrieve all their children. Then add the selected name to a que.     * For each child of the selected name, retrieve their children, then add the child to the que.     * repeat this step till all descendants have been added to the que     */        public void getDescendants(String relative, int generation){                Set<String> children = findChildren(relative);        database.get(relative).setGen(generation);        familyTree.offer(database.get(relative));                if (!(children.isEmpty())){            int gen = generation + 1;            for (String child : children){                if (database.containsKey(child)){                    getDescendants(child, gen);                }            }        }    }            /**     * Return a capitalised version of a string     */    public String capitalise(String s){        return s.substring(0, 1).toUpperCase() + s.substring(1).toLowerCase();    }            public static void main(String[] args){        new Genealogy();    }}