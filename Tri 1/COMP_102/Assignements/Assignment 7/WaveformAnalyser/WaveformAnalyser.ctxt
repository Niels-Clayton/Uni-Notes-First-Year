#BlueJ class context
comment0.target=WaveformAnalyser
comment0.text=\r\n\ This\ is\ related\ to\ your\ program\ from\ assignment\ 3\ which\ analysed\ temperature\ levels\r\n\ However,\ instead\ of\ reading\ data\ from\ the\ user,\ it\ reads\ the\ data\ from\r\n\ a\ file\ into\ an\ ArrayList.\r\n\ It\ can\ also\ cope\ with\ much\ larger\ sets\ of\ numbers.\r\n\ The\ numbers\ are\ guaranteed\ to\ be\ integers\ but\ the\ values\ can\ be\r\n\ \ \ negative\ and\ the\ signal\ swings\ above\ and\ below\ zero.\r\n\r\n\ The\ methods\ you\ are\ to\ complete\ all\ focus\ on\ the\ ArrayList\ of\ data.\r\n\ CORE\r\n\ \ read\:\ \ \ \ \ \ \ \ \ \ \ \ \ \ reads\ numbers\ into\ an\ ArrayList.\r\n\ \ display\:\ \ \ \ \ \ \ \ \ \ \ displays\ the\ waveform.\r\n\ \ showSpread\:\ \ \ \ \ \ \ \ displays\ the\ spread\ with\ two\ horizontal\ lines\ and\ returns\ its\ value.\r\n\ COMPLETION\r\n\ \ displayDistortion\:\ shows\ in\ red\ the\ distorted\ part\ of\ the\ signal.\r\n\ \ highlightPeaks\:\ \ \ \ plots\ the\ peaks\ with\ small\ green\ circles.\r\n\ \ normalise\:\ \ \ \ \ \ \ \ \ normalises\ all\ the\ values\ down\ so\ there\ is\ no\ distortion.\r\n\ CHALLENGE\r\n\ \ doEnvelope\:\ \ \ \ \ \ \ \ displays\ the\ upper\ envelope.\r\n\ \ save\:\ \ \ \ \ \ \ \ \ \ \ \ \ \ saves\ the\ current\ waveform\ values\ into\ a\ file.\r\n\ \ select\ and\ edit\:\ \ \ let\ the\ user\ select\ a\ regions\ of\ the\ waveform\ with\ the\ mouse\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ to\ remove\ them.\ \ Add\ a\ save\ button\ to\ save\ the\ edited\ values.\r\n
comment1.params=
comment1.target=WaveformAnalyser()
comment1.text=\ Constructor\:\r\n
comment10.params=
comment10.target=void\ save()
comment10.text=\r\n\ [CHALLENGE]\r\n\ Saves\ the\ current\ waveform\ values\ into\ a\ file\r\n
comment11.params=action\ x\ y
comment11.target=void\ doMouse(java.lang.String,\ double,\ double)
comment11.text=\r\n\ [CHALLENGE]\r\n\ Lets\ user\ select\ a\ region\ of\ the\ waveform\ with\ the\ mouse\r\n\ and\ deletes\ that\ section\ of\ the\ waveform.\r\n
comment12.params=arguments
comment12.target=void\ main(java.lang.String[])
comment2.params=
comment2.target=void\ setupGUI()
comment2.text=Set\ up\ the\ nine\ buttons\ and\ mouselistener
comment3.params=
comment3.target=void\ read()
comment3.text=\r\n\ [CORE]\r\n\ Clears\ the\ panes,\r\n\ Creates\ an\ ArrayList\ stored\ in\ a\ field,\ then\r\n\ Asks\ user\ for\ a\ waveform\ file\ (eg\ waveform1.txt)\r\n\ Reads\ data\ from\ the\ file\ into\ the\ ArrayList\r\n
comment4.params=
comment4.target=void\ display()
comment4.text=\r\n\ [CORE]\r\n\ Displays\ the\ waveform\ as\ a\ line\ graph,\r\n\ The\ n'th\ value\ in\ waveform\ is\ displayed\ at\r\n\ \ \ \ x-position\ is\ GRAPH_LEFT\ +\ n\r\n\ \ \ \ y-position\ is\ ZERO_LINE\ -\ the\ value\r\n\ Plots\ a\ line\ graph\ of\ all\ the\ points\ with\ a\ blue\ line\ between\r\n\ \ each\ pair\ of\ adjacent\ points\r\n\ Draw\ the\ horizontal\ line\ representing\ the\ value\ zero.\r\n\ Uses\ GRAPH_LEFT\ and\ ZERO_LINE\ for\ the\ dimensions\ and\ positions\ of\ the\ graph.\r\n\ Don't\ worry\ if\ the\ lines\ go\ off\ the\ window\r\n
comment5.params=
comment5.target=void\ showSpread()
comment5.text=\r\n\ [CORE]\r\n\ The\ spread\ is\ the\ difference\ between\ the\ maximum\ and\ minimum\ values\ of\ the\ waveform.\r\n\ Finds\ the\ maximum\ and\ minimum\ values,\ then\r\n\ Displays\ the\ spread\ by\ drawing\ two\ horizontal\ lines\ on\ top\ of\ the\ waveform\:\r\n\ \ \ one\ green\ line\ for\ the\ maximum\ value,\ and\r\n\ \ \ one\ red\ line\ for\ the\ minimum\ value.\r\n
comment6.params=
comment6.target=void\ displayDistortion()
comment6.text=\r\n\ [COMPLETION]\ \ [Fancy\ version\ of\ display]\r\n\ Display\ the\ waveform\ as\ a\ line\ graph.\r\n\ Draw\ a\ line\ between\ each\ pair\ of\ adjacent\ points\r\n\ \ \ *\ If\ neither\ of\ the\ points\ is\ distorted,\ the\ line\ is\ BLUE\r\n\ \ \ *\ If\ either\ of\ the\ two\ end\ points\ is\ distorted,\ the\ line\ is\ RED\r\n\ Draw\ the\ horizontal\ lines\ representing\ the\ value\ zero\ and\ thresholds\ values.\r\n\ Uses\ THRESHOLD\ to\ determine\ distorted\ values.\r\n\ Uses\ GRAPH_LEFT\ and\ ZERO_LINE\ for\ the\ dimensions\ and\ positions\ of\ the\ graph.\r\n\ [Hint]\ You\ may\ find\ Math.abs(int\ a)\ useful\ for\ this\ method.\r\n\ You\ may\ assume\ that\ all\ the\ values\ are\ between\ -250\ and\ +250.\r\n
comment7.params=
comment7.target=void\ highlightPeaks()
comment7.text=\r\n\ [COMPLETION]\r\n\ Plots\ the\ peaks\ with\ small\ green\ circles.\r\n\ \ \ \ A\ peak\ is\ defined\ as\ a\ value\ that\ is\ greater\ or\ equals\ to\ both\ its\r\n\ \ \ \ neighbouring\ values.\r\n\ Note\ the\ size\ of\ the\ circle\ is\ in\ the\ constant\ SIZE_CIRCLE\r\n\ You\ may\ assume\ that\ peaks\ values\ differ\ from\ their\ neighbouring\ points.\r\n
comment8.params=
comment8.target=void\ normalise()
comment8.text=\r\n\ [COMPLETION]\r\n\ Finds\ the\ largest\ value\ (positive\ or\ negative)\ in\ the\ waveform,\ and\r\n\ "normalises"\ all\ the\ values\ -\ multiplies\ them\ by\ threshold/maximum\ -\ so\r\n\ that\ the\ largest\ value\ is\ now\ equal\ to\ the\ distortion\ threshold.\r\n\ Then\ redraws\ the\ waveform.\r\n
comment9.params=
comment9.target=void\ doEnvelope()
comment9.text=\r\n\ [CHALLENGE]\r\n\ Displays\ the\ upper\ envelope\ with\ GREEN\ lines\ connecting\ all\ the\ peaks.\r\n\ \ \ \ A\ peak\ is\ defined\ as\ a\ point\ that\ is\ greater\ or\ equal\ to\ *both*\ neighbouring\ points.\r\n
numComments=13
