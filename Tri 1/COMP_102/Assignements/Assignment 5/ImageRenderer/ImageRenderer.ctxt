#BlueJ class context
comment0.target=ImageRenderer
comment0.text=\ Renders\ plain\ ppm\ images\ onto\ the\ graphics\ panel\r\n\ \ ppm\ images\ are\ the\ simplest\ possible\ colour\ image\ format.\r\n
comment1.params=
comment1.target=void\ renderImageCore()
comment1.text=\ Core\:\r\n\ Renders\ a\ ppm\ image\ file.\r\n\ Asks\ for\ the\ name\ of\ the\ file,\ then\ calls\ renderImageHelper.\r\n
comment2.params=scan
comment2.target=void\ renderImageHelper(java.util.Scanner)
comment2.text=\ Core\:\r\n\ Renders\ a\ ppm\ image\ file.\r\n\ Renders\ the\ image\ at\ position\ (LEFT,\ TOP).\r\n\ Each\ pixel\ of\ the\ image\ \ is\ rendered\ by\ a\ square\ of\ size\ PIXEL_SIZE\r\n\ Assumes\ that\r\n\ -\ the\ colour\ depth\ is\ 255,\r\n\ -\ there\ is\ just\ one\ image\ in\ the\ file\ (not\ "animated"),\ and\r\n\ -\ there\ are\ no\ comments\ in\ the\ file.\r\n\ The\ first\ four\ tokens\ are\ "P3",\ number\ of\ columns,\ number\ of\ rows,\ 255\r\n\ The\ remaining\ tokens\ are\ the\ pixel\ values\ (red,\ green,\ blue\ for\ each\ pixel)\r\n
comment3.params=
comment3.target=void\ renderAnimatedImage()
comment3.text=\ Completion\r\n\ Renders\ a\ ppm\ image\ file\ which\ may\ be\ animated\ (multiple\ images\ in\ the\ file)\r\n\ Asks\ for\ the\ name\ of\ the\ file,\ then\ renders\ the\ image\ at\ position\ (LEFT,\ TOP).\r\n\ Each\ pixel\ of\ the\ image\ \ is\ rendered\ by\ a\ square\ of\ size\ PIXEL_SIZE\r\n\ Renders\ each\ image\ in\ the\ file\ in\ turn\ with\ 200\ mSec\ delay.\r\n\ Repeats\ the\ sequence\ 3\ times.\r\n
comment4.params=
comment4.target=void\ renderChallengeImages()
comment4.text=\r\n\ \ \ \ Challenge\:\r\n\ \ \ \ Render\ both\ P3\ and\ P2\ images\r\n\ \ \ \ P2\ images\ are\ black\ and\ white,\ so\ the\ RGB\ values\ will\ all\ be\ equal\r\n
comment5.params=scan
comment5.target=void\ renderImageChallenge(java.util.Scanner)
numComments=6
