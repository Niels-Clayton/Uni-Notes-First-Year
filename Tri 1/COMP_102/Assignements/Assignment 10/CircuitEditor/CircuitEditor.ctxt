#BlueJ class context
comment0.target=CircuitEditor
comment0.text=\r\n\ A\ Circuit\ Diagram\ editor.\r\n\ The\ diagrams\ consist\ of\ components\ (resistors,\ capacitors,\ sources,\ or\ connectors)\r\n\ and\ wires.\r\n\ Components\ can\ be\ horizontal\ or\ vertical.\ (which\ way\ the\ two\ connectors\ come\ out)\r\n\ Components\ can\ have\ text\ labels\r\n\ Wires\ run\ horizontally\ from\ the\ start\ position,\ then\ vertically\ to\ the\ end\ position.\r\n\ The\ user\ can\ add\ new\ components\ or\ wires,\ or\ select\ existing\ components\ or\ wires\r\n\ \ to\ rotate,\ label,\ or\ delete.\ When\ selecting,\ the\ user\ can\ also\ move\ items\r\n\ One\ component\ or\ one\ wire\ can\ be\ selected.\ It\ should\ be\ highlighted\ in\ the\ diagram.\r\n\ After\ each\ button,\ or\ after\ the\ mouse\ is\ released,\ the\ diagram\ will\ be\ redrawn.\r\n\r\n\ \ \ Instructions\:\r\n\ \ \ \ \ Using\ the\ mouse.\r\n\ \ \ \ \ \ If\ one\ of\ the\ component\ tools\ has\ been\ chosen\:\r\n\ \ \ \ \ \ \ \ \ Add\ a\ new\ component\ by\ clicking\ the\ mouse\ at\ the\ point\r\n\ \ \ \ \ \ \ \ \ where\ the\ component\ should\ be.\r\n\ \ \ \ \ \ \ \ \ The\ new\ component\ will\ become\ the\ selected\ component.\r\n\ \ \ \ \ \ If\ the\ Wire\ tool\ has\ been\ chosen\:\r\n\ \ \ \ \ \ \ \ \ Add\ a\ wire\ by\ dragging\ from\ one\ end\ to\ the\ other\r\n\ \ \ \ \ \ \ \ \ The\ new\ wire\ will\ become\ the\ selected\ wire\r\n\ \ \ \ \ \ If\ the\ Select\ button\ has\ been\ chosen\:\r\n\ \ \ \ \ \ \ \ \ -\ pressing\ on\ a\ component\ then\ releasing\ will\ move\r\n\ \ \ \ \ \ \ \ \ \ \ the\ component\ to\ the\ release\ point,\ and\ make\ it\ be\ selected.\r\n\ \ \ \ \ \ \ \ \ -\ pressing\ on\ a\ wire\ then\ releasing\ will\ move\r\n\ \ \ \ \ \ \ \ \ \ \ the\ wire\ by\ the\ distance\ between\ the\ pressed\ and\ released\ point\r\n\ \ \ \ \ \ \ \ \ \ \ and\ make\ it\ be\ selected\r\n\ \ \ \ \ \ \ \ \ -\ pressing\ anywhere\ else\ makes\ nothing\ be\ selected\r\n\ \ \ \ TextField\ and\ other\ buttons\r\n\ \ \ \ \ \ If\ a\ value\ is\ entered\ in\ the\ label\ box,\ and\ there\ is\ a\ selected\ component,\ then\r\n\ \ \ \ \ \ \ \ \ the\ component\ will\ be\ given\ that\ label.\r\n\ \ \ \ \ \ If\ the\ Delete\ button\ is\ pressed,\r\n\ \ \ \ \ \ \ \ \ then\ the\ selected\ component\ or\ the\ selected\ wire\ is\ removed\ from\ the\ diagram\r\n\ \ \ \ \ \ If\ the\ Rotate\ button\ is\ pressed,\r\n\ \ \ \ \ \ \ \ \ then\ the\ selected\ component\ is\ rotated\ or\r\n\ \ \ \ \ \ \ \ \ the\ selected\ wire\ is\ reversed\ (exchanging\ the\ start\ and\ end\ points).\r\n\ \ \ \ \ \ If\ the\ Clear\ button\ is\ pressed,\ the\ whole\ drawing\ is\ removed.\r\n
comment1.params=
comment1.target=CircuitEditor()
comment10.params=v
comment10.target=void\ setLabel(java.lang.String)
comment10.text=\r\n\ Add\ the\ label\ to\ the\ selected\ component\ (if\ there\ is\ one)\r\n
comment11.params=
comment11.target=void\ doDelete()
comment11.text=\r\n\ Delete\ the\ selected\ component\ (if\ there\ is\ one)\r\n
comment12.params=
comment12.target=void\ doRotate()
comment12.text=\r\n\ Rotate\ the\ selected\ component\ between\ horizontal\ and\ vertical\r\n
comment13.params=action\ x\ y
comment13.target=void\ doMouse(java.lang.String,\ double,\ double)
comment13.text=\r\n\ Respond\ to\ mouse\ events\r\n\ When\ pressed,\r\n\ \ \ Remember\ the\ position\ and\ any\ component\ or\ wire\ it\ is\ on.\r\n\ When\ released\:\r\n\ \ \ make\ the\ mouse\ implement\ the\ instructions\ above.\r\n\ \ \ redraw\ the\ diagram\r\n
comment14.params=
comment14.target=void\ redraw()
comment14.text=\r\n\ Redraws\ the\ diagram.\r\n\ First\ redraws\ all\ the\ wires,\r\n\ Then\ highlights\ the\ selected\ wire,\ if\ there\ is\ one\r\n\ Then\ redraws\ all\ the\ components\r\n\ Then\ highlights\ the\ selected\ component,\ if\ there\ is\ one\r\n
comment15.params=x\ y
comment15.target=Component\ findComponentAt(double,\ double)
comment15.text=\r\n\ Find\ and\ return\ a\ component\ from\ the\ diagram\ that\ the\ point\ (x,\ y)\ is\ on\r\n\ Return\ null\ if\ no\ such\ component\r\n
comment16.params=x\ y
comment16.target=Wire\ findWireAt(double,\ double)
comment16.text=\r\n\ Find\ and\ return\ a\ wire\ in\ the\ diagram\ that\ the\ position\ (x,y)\ is\ on.\r\n\ Return\ null\ if\ no\ such\ wire.\r\n
comment17.params=
comment17.target=void\ loadDrawing()
comment17.text=\r\n\ Load\ a\ new\ drawing\ from\ a\ file.\r\n\ Each\ line\ of\ the\ file\ has\ the\ type\ of\ component\ or\ wire,\ and\ the\ field\ values\r\n
comment18.params=
comment18.target=void\ saveDrawing()
comment18.text=\r\n\ Save\ a\ drawing\ to\ a\ file.\r\n\ Each\ line\ of\ the\ file\ has\ the\ type\ of\ component\ or\ wire,\ and\ the\ field\ values\r\n
comment19.params=arguments
comment19.target=void\ main(java.lang.String[])
comment2.params=
comment2.target=void\ setupGUI()
comment2.text=Sets\ up\ the\ user\ interface\ -\ mouselistener,\ buttons,\ and\ textField
comment3.params=
comment3.target=void\ set_wire()
comment4.params=
comment4.target=void\ set_resistor()
comment5.params=
comment5.target=void\ set_capacitor()
comment6.params=
comment6.target=void\ set_source()
comment7.params=
comment7.target=void\ set_select()
comment8.params=
comment8.target=void\ set_connector()
comment9.params=
comment9.target=void\ clearCircuit()
numComments=20
